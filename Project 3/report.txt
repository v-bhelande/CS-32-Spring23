CS 32 Project 3 Report

Description of Classes:

1) Board:

The 2D Kalah board was mapped as a 1D vector as shown below for a game with 3 holes:
(NP = North pot)
(SP = South pot)

 NP  S1 S2  S3  SP N3  N2  N1
 O   O  O   O   O  O   O   O

===================================================================

SmartPlayer::chooseMove Implementation

The only heuristic I used for this implementation was “The greater the difference between the number of beans in my pot and the number in my opponent's, the better”.

Unfortunately, I could not implement the SmartPlayer::chooseMove function, so I programmed it to choose above like BadPlayer as per the specs requirement. However, I think it's a really cool object to program and this was the implementation I had in mind:

eval(Board& tempboard)
	if either NORTH or SOUTH cannot make a move
		if beans in SOUTH POT > beans inNORTH POT
			return 9999;
		else if beans in SOUTH POT < beans in NORTH POT
			return -9999;
		else return 0;		// draw

	return difference between beans in South's pot and beans in North's pot

minimax(const Board& b, Side s, int& endHole, Sid& endSide, int value, int depth, Timer& t)
	if no move can be made or run out of time (t > 5 secs)
		endHole = -1;
		return;
	if depth is zer0
		endHole = -1;
		call evaluate function
	for all valid moves
		call sow function and evaluate function
		if another move can be made
			make move and call evaluate function
		// Make recursive call
		minimax( b, s, endHole, endSide, v2, depth-1, t)
		switch statement for NORTH and SOUTH
			if (v2 > value) 
				value = v2;
				bestHole = current hole corresponding to v2

SmartPlayer::chooseMove(const Board& b, Side s)
	make a copy of Board b
	call minimax algorithm

===================================================================

Pseudocode:

1) bool board::sow(Side s, int hole, Side &endSide, int &endHole)

switch statement for North and South
	if invalid hole, return false;
	set side to true
	store number of beans to be dispersed as number of beans at chosen hole
	set number of beans at that hole to be 0
	set counter to hole after input hole (mapped accordingly for North)
	while there are beans
		if pot, check if we can put bean in pot
			increment beans at pot by 1
			decrement number of beans to disperse by 1
		fill hole with 1 bean
			increment beans at pot by 1
			decrement number of beans to disperse by 1
		if 0 beans left to sow
			if final hole is between 0 and number of holes
				endSide = SOUTH and endHole = hole
			if final hole is between holes + 1 and length of vector - 1
				endSide = SOUTH and endHole = hole
		return true;

2) HumanPlayer::chooseMove(const Board& b, Side s)

switch statement for North and South
	infinite loop
		Prompt player for move
		if invalid, try again
		break;
	return choice;

3) SmartPlayer::chooseMove/minimax/evaluate

4) bool Game::move (Side s)

switch statement for North and South
	infinite loop
	if no beans on Side s, sweep remains beans into opponent’s pot and end game
	Call sow function to make move
	if last bean lands in Side s pot
		display board
		take another turn
	if capture conditions are met
		call moveToPot function at endHole for both sides to Side s POT
		display board
		return true;
	display board
	return true;

===================================================================

Inefficiencies and Problems:

I did not start using private helper functions until SmartPlayer::chooseMove. As a result, there is repetition of functionality in implementations that could have been delegated to a helper function earlier on leading to me writing redundant code at certain points.

===================================================================

Test Cases:

Board b (3, 2);
b.setBeans(SOUTH, 1, 0);
assert(b.beans(SOUTH, 1)) == 0;
assert(b.beansInPlay(NORTH) == 6 && b.beansInPlay(SOUTH) == 4 && b.totalBeans() == 10);

Side es;
int eh;
b.sow(NORTH, 2, eh, es);
assert(b.beans(NORTH, POT) > b.beans(SOUTH, POT)) && es == NORTH && eh == 0);  // Test sow function works
assert(b.beans(NORTH, 2) == 0);  // Ensure beans are removed from hole sow function was called on

// ============================

Side es2;
int eh2;
Board trivial (4, 0);
assert(!trivial.sow(SOUTH, 2, eh2, es2); // Ensure sow returns false for holes with no beans

// ============================

Side es3;
int eh3;
Board b3 (3, 2);

// ============================

BadPlayer bp1 (“Bart”);
BadPlayer bp2 (“Homer”);
Board b4 (3, 2);
Game g (b, &bp1, & bp2);
g.play();

assert(bp1.name() == “Bart” && !bp1.isInteractive());  // Check that bad player is not interactive and is assigned name correctly
assert(over && hasWinner && winner == NORTH && b4.beans(NORTH, POT) == 10 && b4.beans(SOUTH, POT) == 2 && b4.beans (SOUTH, 2) == 0); // Check that game between 2 bad players produces the correct result and that all beans are in pot when game is over

HumanPlayer hp1 (“Marge”);
BadPlayer bp (“Homer”);
Board b5 (3, 2);
Game g2 (b, &hp1, &bp);
g2.play();

hp1.chooseMove(2);  // Check that south player moves first
hp1.chooseMove(1);  // Check if player gets another turn since last bean landed in Marge’s pot
hp1.chooseMove(2);

// …Keep making moves until we reach…

//  Homer
//   1 0 3
// 3       5 
//   0 1 0
//  Marge

hp1.chooseMove(1);  // Check if capture function works

//  Homer
//   1 0 0
// 3       9 
//   0 0 0
//  Marge

// ============================

SmartPlayer sp (“Lisa”);
BadPlayer bp (“Homer”);
Board b6 (3, 1);
Game g3 (b, ,&bp, &sp);
g3.play();

b6.setBeans(NORTH, 3) = 0;
b6.setBeans(SOUTH, 2) = 0;

//  Lisa
//   1 1 0
// 0       0 
//   1 1 0
//  Homer

bp.chooseMove(2);

//  Lisa
//   1 1 0
// 0       0 
//   1 0 1
//  Homer

sp.chooseMove(1);  // Gets another turn since last bean is placed in pot

//  Lisa
//   0 1 0
// 1       0 
//   1 0 1
//  Homer

sp.chooseMove(2) // Makes a capture

//  Lisa
//   0 0 0
// 3       0 
//   0 0 1
//  Homer

bp.chooseMove(1);

//  Lisa
//   0 0 0
// 3       1 
//   0 0 0
//  Homer

assert(over && hasWinner && winner == "NORTH"); // Check that SmartPlayer won!
